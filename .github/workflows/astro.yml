# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Deploy Astro site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          echo "manager=pnpm" >> $GITHUB_OUTPUT
          echo "command=install" >> $GITHUB_OUTPUT
          echo "runner=pnpm" >> $GITHUB_OUTPUT
          exit 0
      - name: Install PNPM
        run: npm install -g pnpm
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/pnpm-lock.yaml
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}
      # REPLACE THE FOLLOWING WITH CACHING/INSTALLING AND USING PILLOW
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: Cache Pillow
        uses: actions/cache@v3
        id: cache-pillow
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Pillow
        run: |
          echo 'Pillow' > requirements.txt
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Compress images with Pillow
        run: |
          python -c "
          import os
          from PIL import Image

          # Path to the folder containing the images
          folder_path = '${{ env.BUILD_PATH }}/dist'

          # Quality of the compressed images (0-100)
          quality = 50

          # Maximum width of the resized images
          max_width = 800

          # Loop through all files in the folder
          for filename in os.listdir(folder_path):
              # Check if the file is an image
              if filename.endswith('.jpg') or filename.endswith('.jpeg') or filename.endswith('.png'):
                  # Open the image file
                  image_path = os.path.join(folder_path, filename)
                  img = Image.open(image_path)

                  # Resize the image if its width is greater than the maximum width
                  if img.width > max_width:
                      ratio = max_width / img.width
                      new_height = int(img.height * ratio)
                      img = img.resize((max_width, new_height))

                  # Compress the image and save it with the same filename
                  img.save(image_path, optimize=True, quality=quality)
          "
      # REPLACE THE ABOVE WITH CACHING/INSTALLING AND USING PILLOW
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
